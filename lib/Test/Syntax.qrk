module Test.Syntax for FunTest, EnumTest, MethodTest

import Std.Mirror for Reflect
import Std.Test for Case

fun inlineReturn() { 'bar' }

class FunTest : Case {
  
  construct new() {
    super.new()
  }

  @test('inline returns work')
  testInline() {
    this.assertEquals(inlineReturn(), 'bar')
  }

}

// Note: I intend to make enums way more useful later. This
// is just a super simple starting point.
enum EnumFixture {
  foo
  bar
  constantValue = "foo"
}

class EnumTest : Case {

  construct new() {
    super.new()
  }
  
  @test('Comparison')
  testComparison() {
    var e = EnumFixture.foo
    this.assertTrue(e == EnumFixture.foo)
    this.assertFalse(e == EnumFixture.bar)
  }

  @test('Constant value')
  testConstant() {
    var e = EnumFixture.constantValue
    this.assertEquals(e, 'foo')
  }

}

class MethodTypes {
  
  // Static
  static foo() { return 'foo' }

  // Static getter
  static bar { #bar }

  // Static setter
  static bar = value { #bar = value }

  // Instance
  fooBar(a) { return a + 'foo' }

  // Getter with automatic return.
  // 
  // Any function with one expression that doesn't have a
  // newline will automatically return.
  bar { this.values['bar'] }

  // Setter
  bar = value { this.values['bar'] = value }

  // Optional types (just to check parsing -- no real tests for now)
  testType(param:String):Void {
    var foo:String = 'foo'
  }

  // Optional types (just to check parsing -- no real tests for now)
  testGetter:String {
    return 'foo'
  }

  // Optional types (just to check parsing -- no real tests for now)
  testSetter = value:String {
    // cool.
  }

  construct new(values) {
    this.values = values
  }

}

class MethodTest : Case {
 
  construct new() {
    super.new()
    this.obj = null
  }

  @before 
  doBefore() {
    MethodTypes.bar = 'bin'
    this.obj = MethodTypes.new({ bar: 'foo' })
  }

  @test('Static getter and setter works')
  testStaticGetterAndSetter() {
    this.assertEquals(MethodTypes.bar, 'bin')
    MethodTypes.bar = 'changed'
    this.assertEquals(MethodTypes.bar, 'changed')
  }

  @test('Getter and setter works')
  testGetterAndSetter() {
    this.assertEquals(this.obj.bar, 'foo')
    this.assertEquals(this.obj.bar, this.obj.values.bar)
    this.obj.bar = 'bar'
    this.assertEquals(this.obj.bar, 'bar')
    this.assertEquals(this.obj.bar, this.obj.values.bar)
  }

}
