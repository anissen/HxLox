module Std.Build for Project, Target, project

import Std.Core for System 
import Std.Mirror for Reflect

enum Target {
  js = "js"
  node = "node"
  php = "php"
  interpret = "interpret"
  none = "none"
}

class Project {
  
  static run(p) {
    if (p.settings.targets.length > 0) {
      p.settings.targets.forEach { Project.run(it) }
      return
    }
    var target = p.settings.target
    
    System.println('Starting Project ${p.settings.name}')

    if (target == Target.js) { 
      this.buildJs(p.settings)
    } else if (target == Target.node) {
      this.buildNode(p.settings)
    } else if (target == Target.php) {
      this.buildPhp(p.settings)
    } else if (target == Target.interpret) {
      this.interpret(p.settings)
    }

    if (p.afterListeners.length > 0) {
      p.afterListeners.forEach { it() }
    }
  }

  foreign static buildJs(settings)

  foreign static buildNode(settings)

  foreign static buildPhp(settings)

  foreign static interpret(settings)

  construct new(settings) {
    #settings = settings
    #afterListeners = []
  }

  construct default() {
    this.new({
      name: 'Unnamed Project',
      root: System.getCwd(),
      target: Target.none,
      src: 'src',
      main: null,
      libs: {},
      resources: {}, // does nothing right now
      targets: []
    })
  }

  settings { #settings }
  afterListeners { #afterListeners }

  root = value {
    #settings.root = value
  }

  main = value {
    #settings.main = value
  }

  name = value {
    #settings.name = value
  }

  src = value {
    #settings.src = value
  }

  dst = value {
    #settings.dst = value
  }

  target = value {
    #settings.target = value
  }

  libs = value {
    Reflect.getFieldNames(value).forEach {
      #settings.libs[it] = value[it]
    }
  }

  resources = value {
    Reflect.getFieldNames(value).forEach {
      #settings.resources[it] = value[it]
    }
  }

  /// Add listeners to run after building
  after(cb) {
    #afterListeners.push(cb)
  }

  /// Add a sub-target
  sub(cb) {
    var newSettings = {}
    Reflect.getFieldNames(#settings).forEach { 
      newSettings[it] = #settings[it]
    }
    newSettings.targets = []
    var p = Project.new(newSettings)
    cb(p)
    #settings.targets.push(p)
  }

}

fun project(cb) {
  var p = Project.default()
  cb(p)
  Project.run(p)
}
