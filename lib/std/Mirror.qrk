module Std.Mirror for Reflect, Meta

class Reflect {

  foreign static getClass(target)

  foreign static getClassName(target)

  foreign static getSuperclass(target)

  foreign static getMethod(target, name)

  foreign static getMethodNames(target)

  foreign static getConstructor(target, name)

  foreign static getConstructorNames(target)

  foreign static setField(target, name, value)

  foreign static getField(target, name)

  foreign static getFieldNames(target)

  foreign static __getMetadata(target)

  static is(a, b) {
    var passing = this.getClassName(a) == this.getClassName(b)
    if (passing != true) {
      var superclass = this.getSuperclass(a)
      if (superclass == null) return false
      return this.is(superclass, b)
    }
    return passing
  }

}

class Meta {
  
  static getFields(target) {
    var meta = {}
    meta.__TYPE__ = Reflect.__getMetadata(Reflect.getClass(target))
    Reflect.getMethodNames(target).forEach {
      var method = Reflect.getMethod(target, it)
      meta[it] = Reflect.__getMetadata(method)
    }

    var sup = Reflect.getSuperclass(target)
    if (sup != null) {
      var supMeta = this.getFields(sup)
      Reflect.getFieldNames(supMeta).forEach {
        if (meta[it] != null) {
          meta[it] = meta[it].concat(supMeta[it])
        } else {
          meta[it] = supMeta[it]
        }
      }
    }

    return meta
  }
  
  static getType(target) {
    return this.getFields(target).__TYPE__
  }

}
