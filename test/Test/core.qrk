module Test.Core for ReflectTest

import Std.Core for Reflect
import Std.Test for Case

class ReflectFixture {
  
  construct new(a) {
    this.a = a
  }

  construct defaults() {
    this.new('a')
  }

}

class ReflectTest : Case {

  construct new() {
    super.new()
  }
  
  @test('Gets the correct type name')
  testGetType() {
    this.assertEquals(Reflect.getClassName(ReflectTest), 'Test.Core.ReflectTest');
  }

  @test('Compares classes correctly')
  testIs() {
    this.assertTrue(Reflect.is(ReflectTest, ReflectTest));
    this.assertTrue(Reflect.is(ReflectTest, Case));
    this.assertFalse(Reflect.is(ReflectTest, String));
  }

  @test('Gets constructor names')
  testGetConstructors() {
    this.assertEquals(
      Reflect.getConstructorNames(ReflectFixture).join(','),
      'new,defaults'
    ) 
  }

  @test('Calles constructors correctly')
  testCallConstructors() {
    var def = Reflect.getConstructor(ReflectFixture, 'defaults')
    this.assertEquals(def().a, 'a')
    this.assertTrue(Reflect.is(def(), ReflectFixture))
    
    var nu = Reflect.getConstructor(ReflectFixture, 'new')
    this.assertEquals(nu('b').a, 'b')
    this.assertTrue(Reflect.is(nu('b'), ReflectFixture))
  }

}
