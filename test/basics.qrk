module test.basics for ArrayTest, ObjectTest, StringTest

import std.test for Case

class ArrayTest : Case {

  @test('Ensure push works')
  testPush() {
    var arr:Array<Int> = [ 1, 2, 3 ]
    arr.push(4)
    this.assertEquals(arr.length(), 4)
    this.assertEquals(arr[3], 4)
  }

  @test('Subscript operator works')
  testSubscript() {
    var arr:Array<Int> = [ 1, 2 ]
    arr[1] = 3
    this.assertEquals(arr[1], 3)
  }

  @test('Pop works')
  testPop() {
    var arr = [ 1, 2,
      // Check odd whitespace
      3 ]
    var val = arr.pop()
    this.assertEquals(arr.length(), 2)
    this.assertEquals(val, 3)
  }

  @test('Map works')
  testMap() {
    var arr = [ 1, 2, 3 ]
    var changed = arr.map(fun (value, index) {
      return value + 1
    });
    this.assertEquals(changed[0], 2)
    this.assertEquals(changed[1], 3)
    this.assertEquals(changed[2], 4)
  }

}

class ObjectTest : Case {

  @test('Create works')
  testCreate() {
    var obj = {
      a: 'a',
      b: // Check odd whitespace

        'b'
    }

    this.assertEquals(obj.a, 'a')
    this.assertEquals(obj.b, 'b')
  }

  @test('Assign works')
  testAssign() {
    var obj = { a:'a', b:'b' }
    obj.c = 'c'
    this.assertEquals(obj.a, 'a')
    this.assertEquals(obj.b, 'b')
    this.assertEquals(obj.c, 'c')
  }

  @test('Complex structures work')
  testRecursive() {
    var obj = {
      a:'a',
      b:{
        c: { c:
          [
            // Again, test some odd whitespace
            'c'
          ]
        }
      }
    }
    this.assertEquals(obj.a, 'a')
    this.assertEquals(obj.b.c.c[0], 'c')
  }

}

class StringTest : Case {

  @test('Split works')
  testSplit() {
    var arr = 'a,b'.split(',')
    this.assertTrue(Reflect.getType(arr) == 'Array')
    this.assertEquals(arr.length(), 2)
  }

}
