module Test.Basics for ArrayTest, ObjectTest, StringTest, LambdaTest

import Std.Core for Reflect
import Std.Test for Case

class ArrayTest : Case {

  @test('Ensure push works')
  testPush() {
    var arr = [ 1, 2, 3 ]
    arr.push(4)
    this.assertEquals(arr.length, 4)
    this.assertEquals(arr[3], 4)
  }

  @test('Subscript operator works')
  testSubscript() {
    var arr = [ 1, 2 ]
    arr[1] = 3
    this.assertEquals(arr[1], 3)
  }

  @test('Pop works')
  testPop() {
    var arr = [ 1, 2,
      // Check odd whitespace
      3 ]
    var val = arr.pop()
    this.assertEquals(arr.length, 2)
    this.assertEquals(val, 3)
  }

  @test('Map works')
  testMap() {
    var arr = [ 1, 2, 3 ]
    var changed = arr.map { | value, index |
      return value + 1
    }
    this.assertEquals(changed[0], 2)
    this.assertEquals(changed[1], 3)
    this.assertEquals(changed[2], 4)
  }

  @test('Map works with shorter lambda')
  testMapShort() {
    var arr = [ 1, 2, 3 ]
    var changed = arr.map { it + 1 }
    this.assertEquals(changed[0], 2)
    this.assertEquals(changed[1], 3)
    this.assertEquals(changed[2], 4)
  }

  @test('Reduce works')
  testReduce() {
    var arr = [ 1, 2, 3 ]
    var reduced = arr.reduce({ | out, value | out + value }, 0)
    this.assertEquals(reduced, 6)
  }

}

class ObjectTest : Case {

  @test('Create works')
  testCreate() {
    var obj = {
      a: 'a',
      b: // Check odd whitespace

        'b'
    }
    this.assertEquals(obj.a, 'a')
    this.assertEquals(obj.b, 'b')
  }

  @test('Assign works')
  testAssign() {
    var obj = { a:'a', b:'b' }
    obj.c = 'c'
    this.assertEquals(obj.a, 'a')
    this.assertEquals(obj.b, 'b')
    this.assertEquals(obj.c, 'c')
  }

  @test('Complex structures work')
  testRecursive() {
    var obj = {
      a:'a',
      b:{
        c: { c:
          [
            // Again, test some odd whitespace
            'c'
          ]
        }
      }
    }
    this.assertEquals(obj.a, 'a')
    this.assertEquals(obj.b.c.c[0], 'c')
  }

}

class StringTest : Case {

  @test('Split works')
  testSplit() {
    var arr = 'a,b'.split(',')
    this.assertEquals(Reflect.getClassName(arr), 'Array')
    this.assertEquals(arr.length, 2)
  }

  @test('Simple interpolation')
  testInterpolation() {
    var foo = 'foo'
    var bar = 'bar'
    this.assertEquals('start ${ foo + 'ish' } | ${ bar } end', 'start fooish | bar end')
  }

  //  @test('Tagged templates')
  //  testTaggedTemplate() {
  //    var tpl = { | parts, placeholders | parts.reduce({| result, part, i | 
  //      return result + placeholders[i] + '|' + part  
  //    }, '') }
  //    var foo = 'foo'
  //    var res = tpl'start ${ foo } end'
  //    this.assertEquals(res, '|start foo| end')
  //  }

}

class LambdaTest : Case {
  
  @test('Short declaration with no args')
  testShortNoArgs() {
    var test = { 
      return 'a' 
    }
    this.assertEquals(test(), 'a')
  }

  @test('Short declaration with single inline expression automatically returns')
  testShortNoArgs() {
    var test = { 'a' }
    this.assertEquals(test(), 'a')
  }

  @test('Short declaration works')
  testShort() {
    var test = { |a| a }
    this.assertEquals(test('a'), 'a') 
  }

  @test('Automatic single argument (`it`)')
  testIt() {
    var test = { it }
    this.assertEquals(test('a'), 'a')
  }

  @test('Longer version')
  testLonger() {
    var test = fun (a) { 
      return a
    }
    this.assertEquals(test('a'), 'a')
  }

  @test('Trailing arguments')
  testTrailing() {
    var tester = { |a, cb| cb(a) }
    // Both should work the same:
    this.assertEquals(tester('a', { it + 'b' }), 'ab')
    this.assertEquals(tester('a') { it + 'b' }, 'ab')
  }

}
