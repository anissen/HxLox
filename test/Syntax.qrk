module Test.Syntax for EnumTest, MethodTest

import Std.Core for Reflect
import Std.Test for Case

enum EnumFixture {
  Foo
  Bar
}

class EnumTest : Case {
  
  @test('Enum values are the same type as the parent Enum')
  checkEnumType() {
    var e = EnumFixture.Foo
    this.assertEquals(Reflect.getClassName(e), Reflect.getClassName(EnumFixture))
  }

  @test('Comparison')
  testComparison() {
    var e = EnumFixture.Foo
    this.assertTrue(e == EnumFixture.Foo)
    this.assertFalse(e == EnumFixture.Bar)
  }

}

class MethodTypes {
  
  // Static
  static foo() { return 'foo' }

  // Static getter
  static bar { return this._bar }

  // Static setter
  static bar = value { this._bar = value }

  // Instance
  fooBar(a) { return a + 'foo' }

  // Getter
  bar { return this.values['bar'] }

  // Setter
  bar = value { this.values['bar'] = value }

  init(values) {
    this.values = values
  }

}

class MethodTest : Case {
 
  init() {
    super.init()
    this.obj = null
  }

  @before 
  doBefore() {
    MethodTypes.bar = 'bin'
    this.obj = MethodTypes({ bar: 'foo' })
  }

  @test('Static getter and setter works')
  testStaticGetterAndSetter() {
    this.assertEquals(MethodTypes.bar, 'bin')
    this.assertEquals(MethodTypes.bar, MethodTypes._bar)
    MethodTypes.bar = 'changed'
    this.assertEquals(MethodTypes.bar, 'changed')
    this.assertEquals(MethodTypes.bar, MethodTypes._bar)
  }

  @test('Getter and setter works')
  testGetterAndSetter() {
    this.assertEquals(this.obj.bar, 'foo')
    this.assertEquals(this.obj.bar, this.obj.values.bar)
    this.obj.bar = 'bar'
    this.assertEquals(this.obj.bar, 'bar')
    this.assertEquals(this.obj.bar, this.obj.values.bar)
  }

}