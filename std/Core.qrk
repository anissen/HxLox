// Note: implementations for this module are in `quirk/interpreter/foreign/CoreTypes.hx`
module Std.Core for System, Reflect

class System {

  static print(s) {
    __SYSTEM_PRINT(s)
  }

  static println(s) {
    __SYSTEM_PRINT_LN(s)
  }

  static getModule() {
    return __SYSTEM_GET_MODULE()
  }

  static getCwd() {
    return __SYSTEM_GET_CWD()
  }

}

class Reflect {

  static getClass(cls) {
    return __REFLECT_TYPE(cls)
  }

  static getClassName(cls) {
    return __REFLECT_TYPE(cls)
  }

  static is(a, b) {
    var passing = this.getType(a) == this.getType(b)
    if (passing != true) {
      var superclass = this.getSuperclass(a)
      if (superclass == null) return false
      return this.is(superclass, b)
    }
    return passing
  }

  static getSuperclass(target) {
    return __REFLECT_GET_SUPERCLASS(target)
  }

  static getProperty(obj, name) {
    return __REFLECT_GET_METHOD(obj, name)
  }

  static getPropertyNames(cls) {
    return __REFLECT_GET_METHOD_NAMES(cls)
  }

  static getFieldNames(cls) {
    return __REFLECT_GET_FIELD_NAMES(cls)
  }

  static getField(cls, name) {
    return __REFLECT_GET_FIELD(cls, name)
  }

  static getMetadata(target, name) {
    return __REFLECT_GET_METADATA(target, name)
  }

}
