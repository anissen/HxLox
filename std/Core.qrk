module Std.Core for System, Reflect, Meta

class System {

  static print(s) {
    __SYSTEM_PRINT(s)
  }

  static println(s) {
    __SYSTEM_PRINT_LN(s)
  }

  static getModule() {
    return __SYSTEM_GET_MODULE()
  }

  static getCwd() {
    return __SYSTEM_GET_CWD()
  }

}

class Reflect {

  static getClass(target) {
    return __REFLECT_TYPE(target)
  }

  static getClassName(target) {
    return __REFLECT_TYPE_NAME(target)
  }

  static getSuperclass(target) {
    return __REFLECT_GET_SUPERCLASS(target)
  }

  static is(a, b) {
    var passing = this.getClassName(a) == this.getClassName(b)
    if (passing != true) {
      var superclass = this.getSuperclass(a)
      if (superclass == null) return false
      return this.is(superclass, b)
    }
    return passing
  }

  static getMethod(target, name) {
    return __REFLECT_GET_METHOD(target, name)
  }

  static getMethodNames(target) {
    return __REFLECT_GET_METHOD_NAMES(target)
  }

  static getField(target, name) {
    return __REFLECT_GET_FIELD(target, name)
  }

  static getFieldNames(target) {
    return __REFLECT_GET_FIELD_NAMES(target)
  }

  static getField(target, name) {
    return __REFLECT_GET_FIELD(target, name)
  }

}

class Meta {
  
  static getFields(target) {
    var fields = {}
    fields.__TYPE__ = __REFLECT_GET_METADATA(__REFLECT_TYPE(target))
    Reflect.getMethodNames(target).forEach {
      var method = Reflect.getMethod(target, it)
      fields[it] = __REFLECT_GET_METADATA(method)
    }
    return fields
  }
  
  static getType(target) {
    return this.getFields(target).__TYPE__
  }

}
