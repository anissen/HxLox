class Exception {

  construct new(message) {
    this.message = message
  }

}

class Array {

  construct new(values) {
    this.values = values;
  }

  length { this.__length() }

  /// We don't allow foreign properties -- at least not yet
  /// -- so we're using this awkward workaround.
  foreign __length()

  /// `__offsetGet` and `__offsetSet` are special methods used
  /// only by the interpreter for subscripts.
  foreign __offsetGet(i)

  foreign __offsetSet(i, value)

  foreign push(value)

  foreign pop()

  foreign join(glue)

  map(cb) {
    var out = []
    for (var i = 0; i < this.length; i = i + 1) {
      out.push(cb(this[i], i))
    }
    return out
  }

  filter(cb) {
    var out = []
    for (var i = 0; i < this.length; i = i + 1) {
      var value = this[i] 
      if (cb(value, i) == true) {
        out.push(value)
      }
    }
    return out
  }

  forEach(cb) {
    for (var i = 0; i < this.length; i = i + 1) {
      cb(this[i])
    }
  }

  reduce(cb, initial) {
    var out = initial
    for (var i = 0; i < this.length; i = i + 1) {
      out = cb(out, this[i], i)
    }
    return out
  }

}

class Object {

  foreign __offsetGet(key)

  foreign __offsetSet(key, value)

}

class String {

  construct new(value) {
    this.value = value
  }

  foreign indexOf(find)

  foreign split(sep)

  foreign substring(start, end)

  toString() {
    return this.value
  }

}

class RegExp {
  
  construct new(pattern, flags) {
    this.pattern = pattern
    this.flags = flags
  }

  // todo

}
