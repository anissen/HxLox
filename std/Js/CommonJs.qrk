module Std.Js.CommonJs for Environment, Module

class Environment {
    
  static getInstance() {
    if (!this.instance) {
      this.instance = Environment()
    }
    return this.instance
  }

  init() {
    this.modules = {}
  }

  define(name, deps, factory) {
    var mod = Module(this, deps, factory)
    this.modules[name] = mod
    return mod
  }

  loadModules(deps) {
    return this.loadModules(deps, { |err| null })
  }

  loadModules(deps, next) {
    var progress = deps.length
    var onReady = { |err| 
      if (err != null) {
        next(err)
        return
      }
      progress = progress - 1
      if (progress <= 0) {
        next(null)
      }
    }
    deps.forEach({
      var mod = this.modules[it]
      if (mod != null) {
        mod.onReady(onReady)
        mod.enable()
      } else {
        onReady('No module found for ${dep}')
      }
    })
  }

  start(main) {
    this.loadModules([ main ]) { |err| 
      if (err != null) {
        console.error(err)
      }
    }
  }

}

class Module {
  
  init(env, deps, factory) {
    this.env = env
    this.deps = deps
    this.exports = {}
    this.onReadyListeners = []
    this.onFailedListeners = []
    this.define(factory)
  }

}
