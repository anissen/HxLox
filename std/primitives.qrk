// Note: these types are placed in globals, so we
// don't define a module up top. This file is
// never directly imported -- instead, it is
// handled as a Haxe resource. The special
// `__` prefixed functions are defined there.
//
// I'm thinking up a better way to handle extern hooks :P.

class Exception {

  init(message) {
    this.message = message
  }

}

class Array {

  init(values) {
    this.values = values
  }

  __offsetGet(i) {
    return __ARRAY_GET(this.values, i)
  }

  __offsetSet(i, value) {
    __ARRAY_SET(this.values, i, value)
  }

  length() {
    return __ARRAY_LENGTH(this.values)
  }

  push(value) {
    __ARRAY_PUSH(this.values, value)
    return this.length()
  }

  pop() {
    return __ARRAY_POP(this.values)
  }

  map(cb) {
    var out = []
    for (var i = 0; i < this.length(); i = i + 1) {
      out.push(cb(__ARRAY_GET(this.values, i), i))
    }
    return out
  }

  forEach(cb) {
    for (var i = 0; i < this.length(); i = i + 1) {
      cb(__ARRAY_GET(this.values, i))
    }
  }

  reduce(cb, initial) {
    var out = initial
    for (var i = 0; i < this.length(); i = i + 1) {
      out = cb(out, __ARRAY_GET(this.values, i), i)
    }
    return out
  }

  join(glue) {
    return __ARRAY_JOIN(this.values, glue)
  }

}

class Object {

  __offsetGet(key) {
    return Reflect.getField(this, key)
  }

}

class String {

  init(value) {
    this.value = value
  }

  indexOf(find) {
    return __STRING_INDEX_OF(this.value, find)
  }

  split(sep) {
    return __STRING_SPLIT(this.value, sep)
  }

  substring(start, end) {
    return __STRING_SUBSTRING(this.value, start, end)
  }

  toString() {
    return this.value
  }

}

class RegEx {
  
  new(pattern, flags) {
    this.pattern = pattern
    this.flags = flags
  }

  // todo

}
