package quirk.generator;

import quirk.Token;
import quirk.Scanner;
import quirk.Parser;
import quirk.ErrorReporter;

using sys.io.File;
using sys.FileSystem;
using haxe.io.Path;
using Lambda;

class JsTarget implements Target {

  private var loader:JsModuleLoader;
  private var reporter:ErrorReporter;
  private var modules:Map<String, ModuleEntry> = new Map();
  private var dest:String;
  private var main:String;

  public function new(root:String, dest:String, main:String, reporter:ErrorReporter) {
    loader = new JsModuleLoader(root);
    this.dest = dest;
    this.main = main;
    this.reporter = reporter;
  }

  public function resolveModule(path:Array<Token>):String {
    return loader.find(path);
  }

  public function addModuleDependency(name:String, dep:String):Void {
    var mod = modules.get(name);
    if (mod.deps.exists(function (d) return d == dep)) {
      return;
    }
    mod.deps.push(dep);
  }

  public function addModule(name:String):Void {
    if (modules.exists(name)) {
      return;
    }
    var source = loader.load(name);
    var tokens = new Scanner(source, name, reporter).scanTokens();
    var stmts = new Parser(tokens, reporter).parse();
    modules.set(name, { generated: '', deps: [] });
    modules.get(name).generated = new JsGenerator(this, name).generate(stmts);
  }
  
  public function addBuiltinModule(name:String, ?moduleName:String):Void {
    if (moduleName == null) {
      moduleName = name;
    }
    var source = haxe.Resource.getString(name);
    var tokens = new Scanner(source, name, reporter).scanTokens();
    var stmts = new Parser(tokens, reporter).parse();
    modules.set(moduleName, { generated: '', deps: [] });
    modules.get(moduleName).generated = new JsGenerator(this, moduleName).generate(stmts); 
  }

  public function write():Void {
    addBuiltinModule('js:prelude', '_prelude');
    addModule(main);
    writeModules();
  }
  
  private function writeModules() {
    var path = dest.withExtension('js');
    var dir = path.directory();
    if (!dir.exists()) {
      dir.createDirectory();
    }
    var output:Array<String> = [];
    output.push('// Generated by Quirk');
    output.push(modules.get('_prelude').generated);
    modules.remove('_prelude');
    for (name in modules.keys()) {
      var entry = modules.get(name);
      var deps = entry.deps;
      var body = entry.generated;
      output.push('__quirk.env.define("' + name + '", [' +
        deps.join(',') + '], function (require, module) {\n'
        + body + '\n});');
    }
    output.push('__quirk.env.main("' + main + '");');
    path.saveContent(output.join('\n'));

    Sys.println('Saved to :' + path);
  }

}
